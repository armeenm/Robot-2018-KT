// Packaging //
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.51"
    id "org.jetbrains.dokka" version "0.9.17"
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
    //compile pathfinder()
    compile openrio.powerup.matchData()

    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect:1.2.0"
    compile "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    compile "com.github.salomonbrys.kotson:kotson:2.5.0"
    compile "org.knowm.xchart:xchart:3.5.2"
    compile "org.apache.commons:commons-math3:3.6"
    // Testing
    compile fileTree(dir: 'libs', include: '*.jar')
    testCompile("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")
}

// GradleRIO //
def TEAM = 4096
def ROBOT_CLASS = "frc.team4096.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << "roborio"
        }

        // Paths //
        fileTreeArtifact('paths') {
            files = project.fileTree(dir: 'resources/paths')
            directory = '/home/lvuser/paths'
            targets << "roborio"
        }
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}


// Testing //
test {
    useJUnitPlatform()
}

// Kotlin //
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

// Docs //
dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    reportUndocumented = false
}

// Copy custom CSS to right location for Dokka
task cssCopy(type: Copy) {
    from(file("gradle/style.css"))
    into("$buildDir/javadoc")
}

// Build Dokka and copy CSS
task buildDocs {
    dependsOn 'dokka'
    dependsOn 'cssCopy'

    tasks.findByName('cssCopy').mustRunAfter 'dokka'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}
